h1
JavaScript Масиви

p tag
В JavaScript масивът е подреден списък от стойности. На всяка стойност, известна като елемент, е присвоена числова позиция в масива, наречена индекс. Индексирането започва от 0, така че първият елемент е на позиция 0, вторият на позиция 1 и т.н. Масивите могат да съдържат всякакъв тип данни – като числа, низове, обекти или дори други масиви – което ги прави гъвкава и съществена част от програмирането в JavaScript.

image - https://media.geeksforgeeks.org/wp-content/uploads/20250210122951179871/JavaScript-Array.webp

h2
Създаване на масив с помощта на Literal
Създаването на масив с помощта на литерал на масив включва използването на квадратни скоби [] за дефиниране и инициализиране на масива.

code

let a = [];

console.log(a)

let b = [1, 2, 3, 4, 5]
console.log(b)

h2
Създайте с помощта на нова ключова дума (конструктор)
„Конструктор на масиви“ се отнася до метод за създаване на масиви чрез извикване на функцията конструктор на масиви.

code
let a = new Array(1, 2, 3, 4, 5)
console.log(a)

h2
Основни операции с масиви в JavaScript

1-Достъп до елементи от масив
Достъпът до всеки елемент в масива може да се осъществи чрез индексния номер. Индексът в масивите започва с 0.

code

let a = ["HTML", "CSS", "JS"]
console.log(a[0]);
console.log(a[1]);

2-Достъп до първия елемент на масив
Индексирането на масива започва от 0, така че можем да достъпим първия елемент от масива, използвайки индексния номер.

code

let a = ["HTML", "CSS", "JS"];
let fst = a[0];

console.log("First Item: ", fst);


3- Достъп до последния елемент от масив
Можем да достъпим последния елемент от масива, използвайки индексния номер [array.length - 1].

code


let a = ["HTML", "CSS", "JS"];
let lst = a[a.length - 1];

console.log("Last Item: ", lst);

4-Модифициране на елементите на масива
Елементите в масив могат да бъдат променяни чрез присвояване на нова стойност на съответния им индекс.

code

let a = ["HTML", "CSS", "JS"];
console.log(a);

a[1]= "Bootstrap";
console.log(a);

5- Добавяне на елементи към масива

Елементи могат да бъдат добавяни към масива, използвайки методи като push() и unshift() .

    Методът push() добавя елемента в края на масива.
    Методът unshift() добавя елемента в началото на масива.

code


let a = ["HTML", "CSS", "JS"];

a.push("Node.js");

a.unshift("Web Development");

console.log(a);

6- Премахване на елементи от масив
За да премахнем елементите от масив, имаме различни методи като pop() , shift() или splice() .

    Методът pop() премахва елемент от последния индекс на масива.
    Методът shift() премахва елемента от първия индекс на масива.
    Методът splice() премахва или замества елемента от масива.

code

let a = ["HTML", "CSS", "JS"];
console.log("Original Array: " + a);

let lst = a.pop();
console.log("After Removing the last: " + a);

let fst = a.shift();
console.log("After Removing the First: " + a);

a.splice(1, 2);
console.log("After Removing 2 elements starting from index 1: " + a )

7- Дължина на масива
Можем да получим дължината на масива, използвайки свойството array length .

code

let a = ["HTML", "CSS", "JS"];

let len = a.length;

console.log("Array Length: " + len);

8-Итериране през елементи на масив
Можем да итерираме масив и да осъществяваме достъп до елементи от масива, използвайки циклите for и forEach.

code

let a = ["HTML", "CSS", "JS"];

for (let i = 0; i < a.length; i++) {
    console.log(a[i])
}

9- Конкатенация на масиви
Чрез вградената функция .concat() могат да се съберат няколко масива в един масив. Този процес се нарича конкатенация.

code
let a = ["HTML", "CSS", "JS", "React"];
let b = ["Node.js", "Expess.js"];

let concateArray = a.concat(b);

console.log("Concatenated Array: ", concateArray);


10- Преобразуване на масив в символен низ
Това става с вградената функция .toString(), който преобразува масив в низ

code

let a = ["HTML", "CSS", "JS"];

console.log(a.toString());


links - https://www.geeksforgeeks.org/javascript/javascript-arrays/
